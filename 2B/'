import regex as re
import pandas as pd
from datetime import datetime, timedelta

from .intersection import Intersection
from .site import Site
from .link import Link
from .traffic_problem import TrafficProblem

class FileParser:
    DATA_DIR_PATH = "src/data/"
    def __init__(self, file_name):
        self.file_name = file_name
        self.origin = None        # <Site> - the first site of the search
        self.dest = None          # <Site> - the final site of the search
        self.sites = []
        self.links = []         # [<Link>, <Link>, ...]

    # def create_problem(self):
        # return TrafficProblem([n for n in self.nodes_by_id.values()], self.init, self.goal, self.edges)

        
    def parse(self):
        # CREATE SITE OBJECTS
        sites_data = pd.read_csv(
                self.DATA_DIR_PATH + self.file_name,
                dtype=str,
                usecols=[
                    "SCATS Number",
                    "Location",
                    "NB_LATITUDE",
                    "NB_LONGITUDE",
                    "Date",
                    "V00","V01","V02","V03","V04","V05","V06","V07","V08","V09","V10","V11","V12","V13","V14","V15","V16","V17","V18","V19","V20","V21","V22","V23","V24","V25","V26","V27","V28","V29","V30","V31","V32","V33","V34","V35","V36","V37","V38","V39","V40","V41","V42","V43","V44","V45","V46","V47","V48","V49","V50","V51","V52","V53","V54","V55","V56","V57","V58","V59","V60","V61","V62","V63","V64","V65","V66","V67","V68","V69","V70","V71","V72","V73","V74","V75","V76","V77","V78","V79","V80","V81","V82","V83","V84","V85","V86","V87","V88","V89","V90","V91","V92","V93","V94","V95"
                    ])

        # roads_in_site = []
        # flow_records_of_site = {}
        # current_site = sites_data.loc[0]
        # prev_site = sites_data.loc[0]

        # all_roads = []

        # for index, site in sites_data.iterrows():
        #     scats_num = site["SCATS Number"]
        #     final_site = site

        #     # if scats_num != prev_site["SCATS Number"]
        #     roads = re.split(r" [NSEW]{1,2} of ", site.Location, flags=re.IGNORECASE)
        #     for r in roads:
        #         if not r in roads_in_site:
        #             roads_in_site.append(r)
        #         if not r in all_roads:
        #             all_roads.append(r)

        #     date = datetime.strptime(site.Date, '%d/%m/%Y')
        #     time_delay_list = site[[
        #         "V00","V01","V02","V03","V04","V05","V06","V07","V08","V09","V10","V11","V12","V13","V14","V15","V16","V17","V18","V19","V20","V21","V22","V23","V24","V25","V26","V27","V28","V29","V30","V31","V32","V33","V34","V35","V36","V37","V38","V39","V40","V41","V42","V43","V44","V45","V46","V47","V48","V49","V50","V51","V52","V53","V54","V55","V56","V57","V58","V59","V60","V61","V62","V63","V64","V65","V66","V67","V68","V69","V70","V71","V72","V73","V74","V75","V76","V77","V78","V79","V80","V81","V82","V83","V84","V85","V86","V87","V88","V89","V90","V91","V92","V93","V94","V95"
        #         ]].values.tolist()

        #     for i in range(len(time_delay_list)):
        #         flow_records_of_site[date + timedelta(minutes=i*15)] = time_delay_list[i]

        #     if not scats_num in [s.scats_num for s in self.sites]:
        #         # self.sites.append(Site(prev_site["SCATS Number"], (prev_site.NB_LATITUDE, prev_site.NB_LONGITUDE), roads_in_site, flow_records_of_site))
        #         if len(self.sites) == 0:
        #             if scats_num == sites_data.loc[0]["SCATS Number"]:
        #                 site1 = sites_data.loc[0]
        #                 self.sites.append(Site(site1["SCATS Number"], (site1.NB_LATITUDE, site1.NB_LONGITUDE), roads_in_site, flow_records_of_site))
        #         else:
        #             self.sites.append(Site(site["SCATS Number"], (site.NB_LATITUDE, site.NB_LONGITUDE), roads_in_site, flow_records_of_site))
        #             roads_in_site = []
        #             if scats_num == '0970':
        #                 print(flow_records_of_site)
        #             flow_records_of_site = {}
        #             prev_site = site


        # Gather all unique SCATS numbers and roads
        unique_scats_nums = []
        unique_intersections = []
        unique_roads = []
        for index, site in sites_data.iterrows():
            if not site["SCATS Number"] in unique_scats_nums:
                unique_scats_nums.append(site["SCATS Number"])

            if not site["Location"] in unique_intersections:
                unique_intersections.append(site["Location"])

            # Extract 'WARRIGAL_RD' and 'TOORAK_RD' from 'WARRIGAL_RD N of TOORAK_RD'
            for road in re.split(r" [NSEW]{1,2} of ", site.Location, flags=re.IGNORECASE):
                if not road in unique_roads:
                    unique_roads.append(road)


        intersections = []
        for intersection in unique_intersections:
            scats_num = ""
            lat, long = 0, 0
            roads = re.split(r" [NSEW]{1,2} of ", intersection, flags=re.IGNORECASE)
            flow_records = {}

            for index, site in sites_data.loc[sites_data['Location'] == intersection].iterrows():
                scats_num = site["SCATS Number"]
                lat, long = site.NB_LATITUDE, site.NB_LONGITUDE
                date = datetime.strptime(site.Date, '%d/%m/%Y')
                time_delay_list = site[[
                    "V00","V01","V02","V03","V04","V05","V06","V07","V08","V09","V10","V11","V12","V13","V14","V15","V16","V17","V18","V19","V20","V21","V22","V23","V24","V25","V26","V27","V28","V29","V30","V31","V32","V33","V34","V35","V36","V37","V38","V39","V40","V41","V42","V43","V44","V45","V46","V47","V48","V49","V50","V51","V52","V53","V54","V55","V56","V57","V58","V59","V60","V61","V62","V63","V64","V65","V66","V67","V68","V69","V70","V71","V72","V73","V74","V75","V76","V77","V78","V79","V80","V81","V82","V83","V84","V85","V86","V87","V88","V89","V90","V91","V92","V93","V94","V95"
                    ]].values.tolist()
                
                for i in range(len(time_delay_list)):
                    flow_records[date + timedelta(minutes=i*15)] = time_delay_list[i]

            intersections.append(Intersection(scats_num, intersection, (lat, long), roads, flow_records))
            # if intersection == 'VICTORIA_ST W OF BURNLEY_ST':
            #     i = Intersection(intersection, (lat, long), roads, flow_records)
            #     print(i.flow_records)
        
        # print(intersections)

        # for site in self.sites:
        #     print(site.scats_num, site.roads)

        # self.sites.append(Site(final_site["SCATS Number"], (final_site.NB_LATITUDE, final_site.NB_LONGITUDE), roads_in_site, flow_records_of_site))
        
        for num in unique_scats_nums:
            intersections_in_site = []
            for index, site in sites_data.loc[sites_data['SCATS Number'] == num].iterrows():
                for intersection in intersections:
                    if site.Location == intersection.location and not intersection in intersections_in_site:
                        intersections_in_site.append(intersection)
            self.sites.append(Site(num, intersections_in_site))

        # for site in self.sites:
        #     print(site.scats_num)
        #     for i in site.intersections:
        #         print(i.location, i.coordinates)
        #         print(i.flow_records)
        #     print()



        # LINK SITES BY ROADS
        origin_scats = ""
        dest_scats = ""
        for origin in unique_roads:
            origin_intersections = [i for i in intersections if origin in i.roads]

            for i in origin_intersections:
                for d in [d for d in i.roads if d != origin]:
                    origin_scats = i.scats_num
                    dest_scats = d.scats_num

                    print(origin, destination)
                    print(origin_scats, dest_scats)
                    print()

            # for destination in unique_roads:
            #     dest_intersections = [i for i in intersections if destination in i.roads]




                # for destination in [r for r in intersection.roads if r != road]:
                #     for l in self.links:
                #         if l.origin != origin and l.destination != destination:
                #             self.links.append(Link(origin, destination)
                    # print(road)
                    # print(i.roads)
                    # print(r)
                    # print()
                # for r in i.roads:
                #     if r == road and r not in [l.destination for l in self.links):




                # print(a, a.coordinates, a.roads)
                # print(self.links)
            # print()




        # for item in data.keys:
        #     print(item[0])
        # format_error = "\nInput file is not written in the correct format.\n"
        # self.nodes_by_id = {}
        # f = open(self.TEST_DIR_PATH + filename, "r")
        # assert f.readline().strip() == 'Nodes:', wrong_format_error
        # node_str = f.readline().strip()        # Line under the 'Nodes:' heading
        # while node_str != "Edges:":
        #     assert re.match(r'^\d+: \(\d+,\d+\)$', node_str), wrong_format_error # RegEx for '#: (#,#)'
        #     node_id, x, y = [int(x) for x in re.split(r'\D+', node_str[:-1])]
        #     self.nodes_by_id[node_id] = Node(node_id,(x,y))
        #     node_str = f.readline().strip()
        # edge_str = f.readline().strip()        # Line under the 'Edges:' heading
        # while edge_str:                        # Continue until an empty line
        #     # state      - the 'from' address (Int)
        #     # transition - the 'to' address (Node)
        #     # cost       - the expense of traversing (Int)
        #     assert re.match(r'^\(\d+,\d+\): \d+$', edge_str)  # RegEx for the text format, '(#,#): #'
        #     s, t, c = [int(x) for x in re.split(r'\D+', edge_str[1:])]
        #     s = self.nodes_by_id[s]
        #     t = self.nodes_by_id[t]
        #     # Connect s -> t by an edge with a cost of c
        #     if s in self.edges:
        #         self.edges[s].update({t:c})
        #     else:
        #         self.edges[s] = {t:c}
        #     edge_str = f.readline().strip()
        # assert f.readline().strip() == 'Origin:', wrong_format_error
        # self.init = self.nodes_by_id[int(f.readline())]    # initial - the first node of the problem (Node)
        # assert f.readline().strip() == 'Destinations:', wrong_format_error
        # dest_str = f.readline().strip()         # Line under the 'Destinations:' heading
        # assert re.match(r'^\d+(; \d+)*$', dest_str), wrong_format_error # RegEx for '#' or '#; #; ... #'
        # self.goal = [self.nodes_by_id[int(i)] for i in dest_str.split(";")] # [<Node>,<Node>,...]
